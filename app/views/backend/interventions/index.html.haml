= render 'backend/shared/financial_year_warning' if Preference.get(:permanent_stock_inventory, true).boolean_value
= kujaku do |k|
  - k.text
  - k.multi_choice :state, label: :element_status.tl, data: [:in_progress, :done, :validated].map { |s| { label: s.tl, name: s } }
  - k.multi_choice :nature, data: [{ label: :planned.tl(count: 1), name: :request }, { label: :conducted.tl, name: :record }]
  - k.list :cultivable_zone, value_label: :name
  - procedure_names = Intervention.used_procedures.collect { |p| [p.human_name, p.name.to_s] }.sort_by(&:first)
  - k.list :procedure_name, label: Intervention.human_attribute_name(:reference_name), list_values: procedure_names
  - k.list :activity, value_label: :name
  - if current_campaign
    - productions = ActivityProduction.of_campaign(current_campaign)
    - targeted_products = Product.joins(:intervention_targets).distinct if productions.exists?
    - if productions && productions.any?
      - targets_list = accented_sort(targeted_products.map { |t| [t.work_name, t.id] })
      - k.list :target, list_values: targets_list
  - if InterventionLabelling.any?
    - labels_list = Label.where(id: InterventionLabelling.select(:label_id).uniq).pluck(:name, :id)
    - k.list :label, list_values: labels_list
  - k.list :worker, value_label: :name
  - k.list :equipment, value_label: :name

- main_toolbar do |t|
  = t.new(nature: :request, label: :add_intervention_request.tl, params: { redirect: nil })
  = t.new(nature: :record, label: :add_intervention_record.tl, params: { redirect: nil })

- main_period_selector

- if current_campaign
  = janus do |j|
    - j.face :cobbles do

      -# Add content to the main toolbar
      - content_for(:main_toolbar) do
        = label_tag(nil, nil, class: 'compare-planned-realised') do
          = check_box_tag('compare-planned-and-realised', 'false', user_preference_value(User::PREFERENCE_SHOW_COMPARE_REALISED_PLANNED))
          = :compare_planned_and_realised.tl

      - campaign ||= current_campaign

      = taskboard :interventions do |board|

        = modal(id: "taskboard-modal", class: "interventions-modal", size: :large) do
          .modal-body
          .modal-footer

        :ruby
          edit_icon = content_tag(:i, nil, { :class => "picto picto-long-arrow-right picto--invisible edit-tasks", :title => :change_status_of_selected_interventions.tl })
          delete_icon = content_tag(:i, nil, { :class => "picto picto-delete picto--invisible delete-tasks", :title => :delete_selected_interventions.tl, data: {confirm: :are_you_sure.tl} })
          headers_actions = [edit_icon, delete_icon]

          search_params = params.deep_dup.except(:controller, :action)
          search_params[:period_interval] = current_period_interval
          search_params[:period] = current_period

          header_class = 'taskboard-header--gray'

          board.column :requests do |column|
            requested_interventions = Intervention.with_unroll(search_params.to_unsafe_h.merge(nature: :request, state: :done))
            column.header :planned.tl(count: requested_interventions[:total_count]) + " (" + requested_interventions[:total_count].to_s + ")", headers_actions, class: header_class
            add_taskboard_tasks(requested_interventions[:interventions], column)
          end

          board.column :current do |column|
            interventions_in_progress = Intervention.with_unroll(search_params.to_unsafe_h.merge(nature: :record, state: :in_progress))
            column.header :current.tl + " (" + interventions_in_progress[:total_count].to_s + ")", headers_actions, class: header_class
            add_taskboard_tasks(interventions_in_progress[:interventions], column)
          end

          board.column :finished do |column|
            interventions_done = Intervention.with_unroll(search_params.to_unsafe_h.merge(nature: :record, state: :done))
            column.header :completed.tl + " (" + interventions_done[:total_count].to_s + ")", headers_actions, class: header_class
            add_taskboard_tasks(interventions_done[:interventions], column)
          end

          board.column :validated do |column|
            validated_interventions = Intervention.with_unroll(search_params.to_unsafe_h.merge({ :nature => :record, :state => :validated }))
            column.header :validated.tl + " (" + validated_interventions[:total_count].to_s + ")", [], class: header_class
            add_taskboard_tasks(validated_interventions[:interventions], column)
          end

    - j.face :list do
      = main_list
